<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HOWTO Startup A Hexo Blog]]></title>
    <url>%2F2018%2F01%2F14%2Fhowto-hexo%2F</url>
    <content type="text"><![CDATA[环境OS: MacOS 10.13.2nvm: 0.33.2nodejs: v9.4.0npm: v5.6.0hexo: 3.4.4hexo-cli: 1.0.4 Github Pages简介Github Pages是Github提供的一种服务，简单说，就是使用git仓库来帮助用户托管静态web页面，通过username.github.io这个域名即可访问这些静态文件。 每个Github账户或组织有一个Github Pages站点，以及不限制数目的项目站点。这为用户或组织的介绍以及各个项目的介绍、演示提供了一定的便利。 后来，很多开发者干脆就把Github Pages当做了自己的blog托管工具，由于其灵活性和复杂度介于第三方blog服务（如CSDN、cnblog）和搭建独立blog之间，很多开发者都将blog转向了此处，配合独立的域名，可以迅速搭建简化版的独立blog，从而可以将经历放在写作而不是服务器的维护上。 使用Github Pages托管静态网页有两种方式： 创建username.github.io仓库，并将静态页面提交到该仓库master分支，该仓库的根目录即可理解为webserver的root目录，可以通过https://username.github.io 访问。这种方法适合于给个人或组织做介绍主页。 任意仓库下创建gh-pages分支，将静态页面文件提交至该分支，即可通过https://username.github.io/reponame来访问。这种方法适合于给某个项目做项目主页。 按照官方文档，第二种类型的pages也可以不用gh-pages分支，而使用任意分支甚至任意分支的任意目录。通过仓库的Settings-&gt;Github Pages即可设置 关于Github Pages更为详细的介绍可以参考官方文档，有图有文，按照向导一步一步做，很容易创建一个pages。 国内的代码托管服务码云、Coding均有类似服务，配置方式可能稍有不同。 静态网站生成器Github Pages原生支持jekyll，一个Ruby实现的静态网站生成器。 生成器将plain text(Markdown or Textile) + theme(CSS and JS)转化为静态网站。用户可以用自己熟悉标记语言，将重心放在写作内容上，再配以各种主题包，即可快速生成一个可部署的网站。 与jekyll类似的工具还有hexo、octopress等。Jekyll基于Ruby实现，octopress是Jekyll的封装，而hexo基于nodejs。 经过简单的对比（可以参考这里），最后选择了hexo，主要原因是：简单、快速、文档友好。 安装Hexo基于node.js，所以安装Hexo的顺序是： node.js Hexo Blog主题与插件 nodejs与npm安装首先安装或更新node.js到最新版本，这里使用nvm(Node Version Manager):12$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh$ nvm install stable 也可以到官网下载对应平台安装包或者使用对应平台的包管理器（apt、brew、dnf等）。 一旦node安装成功，npm就可以使用了，剩下的hexo和各种插件的安装相当简单。 hexo安装12345678910# 使用npm安装hexo$ npm install -g hexo-cli# 建站$ cd your_workspace$ hexo init blog_dir$ cd blog_dir# 记住一定要运行如下命令$ npm install# 启动预览$ hexo server 如果没有异常，完成上述命令，在浏览器访问localhost:4000即可看到基于Hexo默认主题的Hello World: 一个刚刚初始化好的blog_dir，应该包含如下目录结构：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 各个目录的详细介绍可以参考Hexo官方文档 主题安装在hexo的官网主题页面浏览了一下午，最后有三款主题比较和心意: Material Maupassant Next 查看了几个基于上述主题的blog，发现Material存在些bug，Maupassant和Next简洁大方，使用者很多，而Next的文档相当友好，所以最后选择了Next。 主题安装很简单，直接使用Git下载，方便以后升级：12$ cd blog_dir # 进入刚才使用hexo创建的blog目录$ git clone https://github.com/theme-next/hexo-theme-next themes/next 然后修改站点配置文件_config.yml:123# 修改theme值为theme目录下对应主题目录的值# 注意yml的语法，冒号后边一定要有空格theme: next 再次启动服务，本地预览新主题：123$ hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 插件安装在网上看到其他基于hexo + Next的blog，比自己的多出了一些功能，调查发现原来可以通过插件来扩展功能，如RSS、搜索、动态背景、分享、打赏等等。于是参考了几篇blog，选了几个适合自己的插件安装： 部署：hexo-deployer-git 搜索：hexo-generator-serachdb 订阅：hexo-generator-feed 使用npm安装：123$ npm install hexo-deployer-git --save$ npm install hexo-generator-searchdb --save$ npm install hexo-generator-feed --save 配置配置主要集中在站点配置文件和主题配置文件中，二者均为_config.yml，一个位于blog主目录中，一个位于所使用的主题目录中。 站点配置站点配置文件中修改的配置项有：12345678910111213141516171819202122232425title:subtitle:description:author:language:timezone:url:theme:deploy: type: git repository: ... branch: mastersearch: path: search.xml field: post format: html limit: 10000feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: ' ' 主题配置主题配置文件中修改的配置项有：1234567891011121314footer: since: 2018menu: home: / || home categories: /categories || th tags: /tags/ || tags archives: /archives/ || archivescheme: Mistsocial: E-Mail:avatar:highlight_theme: night eightieslocal_search: enable: true 需要注意的坑 npm的包可能被墙 yaml文件的冒号后边要跟空格 总结一下流程12345678910$ npm install -g hexo-cli$ hexo init blog$ cd blog$ npm install$ npm install hexo-deployer-git --save$ npm install hexo-generator-searchdb --save$ npm install hexo-generator-feed --save$ git clone https://github.com/theme-next/hexo-theme-next themes/next# 修改站点配置和主题配置后，启动预览$ hexo server 参考 https://pages.github.com/ http://git.mydoc.io/?t=154714 https://hexo.io/zh-cn/docs/index.html http://theme-next.iissnan.com/getting-started.html]]></content>
      <categories>
        <category>HOWTO</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>howto</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F01%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
